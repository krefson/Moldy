SHELL=/bin/sh
#
#  Compilation Options  - choose a suitable set for your machine
#     
#
#  USE_XDR.  Uncomment this line to enable XDR support.
XDR=-DUSE_XDR
#  **** Scalar machines using default C compiler ****
CFLAGS=	-O  $(XDR) $(CFLAGS0)
#LDFLAGS= $(LDFLAGS0)
#INLINE=
#  **** Scalar machines using gcc - can compile with -g ****
#CC=	gcc
#CFLAGS= -O2 -ffast-math $(XDR) $(CFLAGS0)
#CFLAGSAUX=-funroll-loops
#LDFLAGS= $(LDFLAGS0)
#INLINE=
#  **** IBM RS6000 ****
#CC=c89
#CFLAGS=	-O -DRS6000 $(XDR) $(CFLAGS0)
#LDFLAGS= $(LDFLAGS0)
#INLINE=
#  **** MIPS for SGI etc ****
#CFLAGS=	-O2 -mips2  $(XDR) $(CFLAGS0)
#LDFLAGS= $(LDFLAGS0) -lsun -lmalloc -lfastm
#INLINE=
#  **** Sun (unbundled) CC -- fastest options & better than gcc 2.0
#  About the same as gcc-2.3.3.
#CFLAGS= -cg89 -libmil -dalign  -O4 $(XDR) $(CFLAGS0)
#CFLAGS2= 
#LDFLAGS= $(LDFLAGS0)
#INLINE=
#  **** gcc on Suns with unbundled ANSI CC ****
#CC=	gcc
#CFLAGS= -O2 -ffast-math -DANSI_LIBS $(XDR) $(CFLAGS0)
#CFLAGSAUX=-funroll-loops
#LDFLAGS= -L/usr/lang/SC1.0/ansi_lib -lansi $(LDFLAGS0)
#INLINE=
#  **** Solaris 2 using gcc  ****
#CC=	gcc
#CFLAGS= -O2 -ffast-math -DANSI_LIBS $(XDR) $(CFLAGS0)
#CFLAGSAUX=-funroll-loops
#LDFLAGS= $(LDFLAGS0) -lnsl
#INLINE=
#  **** DEC Alpha ****
#CFLAGS=	-O2 $(XDR) $(CFLAGS0) -D_FASTMATH -DANSI_LIBS -std
#CFLAGS2=
#LDFLAGS= $(LDFLAGS0)
#  **** HP 700 ****
#CFLAGS=	+O3 +Om1 -J $(XDR) $(CFLAGS0)
#CFLAGS2=
#LDFLAGS= $(LDFLAGS0)
#  **** Stellar ****
#CFLAGS= -g -O2 -va -na -nv $(XDR) $(CFLAGS0)
#CFLAGS2= +CaliasFreePointers
#LDFLAGS= $(LDFLAGS0) -g -z 
#INLINE=
#  **** Titan ****
#CFLAGS= -O2 -vector_c -vreport $(XDR) $(CFLAGS0)
#CFLAGS2=  -safe=ptrs
#LDFLAGS= $(LDFLAGS0) 
#CFLAGSAUX=-catalog=aux.in 
#INLINE= -inline -Npaths=aux.in
#  **** convex ****
#CFLAGS= -O2 -va -na -nv -fi $(XDR) $(CFLAGS0)
#CFLAGS2= -alias standard -alias ptr_args
#CFLAGSP= -O3 -re
#LDFLAGS= $(LDFLAGS0) -fi -lveclib 
#INLINE=
#  **** Cray **** (SCC 3.0)
#CFLAGS= -h nostdc,vector3,scalar3,report=itvf,ivdep,fastaddr $(XDR) $(CFLAGS0)
#LDFLAGS= $(LDFLAGS0) -Wl,-D,"HEAP=50000+50000;STACK=10000+10000" -lsci
#INLINE=
#  ***** End *****
LINT=		lint
TAR=		tar
DCLAR=		dclar
PFLAGS=		-P
EPFLAGS=	-2r
A2FLAGS=
SHFILE=		$$file
FILES = accel algorith alloc aux beeman convert dump ewald force input \
	eigens kernel main matrix output quaterns rdf restart startup \
	values xdr

CFILES = $(FILES:%=%.c)

OFILES = $(FILES:%=%.o)

LFILES = $(FILES:%=%.ln)

INFILES = control.water control.100 tips2.in\
		control.tip4p tip4p.in\
		methane.in mcy.in water-big.in control.big\
		control.mgclh2o mgclh2o.in control.clay

SHAKS=	algorith alloc aux eigens kernel input matrix\
		quaterns restart startup values xdr

SHAKC= $(SHAKS:%=%.c)

SHAKOBJS= $(SHAKS:%=%.o)

UTILS = moldyextract dumpanalyze dumpconvert dumpextract  moldyanalyze

EXTRAS = $(UTILS:%=%.c) mdshak.c ewald_parallel.c force_parallel.c

HFILES=		structs.h defs.h string.h time.h stddef.h stdlib.h messages.h xdr.h

DOC=		READ.ME BENCHMARK water-canon.out COPYING \
			moldy.tex moldy.bbl

VMSBUILD=	compile_moldy.com link_moldy.com defcomm.com\
		compile_utils.com link_utils.com compile.com

moldy:		$(OFILES) $(EXTRA_OBJ) $(HFILES)
		$(CC)  $(OFILES) $(EXTRA_OBJ) $(LDFLAGS) -lm -o moldy

moldyextract:	moldyextract.c $(HFILES)
		$(CC) $(CFLAGS) $@.c -o $@ $(LDFLAGS)

moldyanalyze:	moldyanalyze.c $(HFILES)
		$(CC) $(CFLAGS) $@.c -o $@ $(LDFLAGS)

dumpanalyze:	dumpanalyze.c xdr.o $(HFILES)
		$(CC) $(CFLAGS) $@.c xdr.o -o $@ $(LDFLAGS)

dumpextract:	dumpextract.c xdr.o $(HFILES)
		$(CC) $(CFLAGS) $@.c xdr.o -o $@ $(LDFLAGS)

dumpconvert:	dumpconvert.c xdr.o $(HFILES)
		$(CC) $(CFLAGS) $@.c xdr.o -o $@ $(LDFLAGS)

mdshak:		mdshak.o $(SHAKOBJS)
		$(CC) -o mdshak mdshak.o $(SHAKOBJS) $(LDFLAGS) -lm

utilities:	$(UTILS) mdshak

protoize:	$(CFILES) $(HFILES)
		protoize -k $(CFILES)

proto-mdshak:	mdshak.c $(SHAKC)
		protoize mdshak.c $(SHAKC)

install:	moldy $(UTILS) mdshak
		for file in $?; do install $$file $$HOME/bin; done

install2:	moldy $(UTILS) mdshak
		for file in $?; do install $$file $$HOME/bin.$$HOSTTYPE; done

Makefile:	xmakefile
		@PATH=/usr/5bin:${PATH};\
		echo		'{{{{{{\n/^CFILES/  c\\\nCFILES='  $(CFILES)\
				'\n}\n/^OFILES/  c\\\nOFILES='  $(OFILES)\
				'\n}\n/^LFILES/  c\\\nLFILES='  $(LFILES)\
				'\n}\n/^EXTRAS/  c\\\nEXTRAS='  $(EXTRAS)\
				'\n}\n/^SHAKC/   c\\\nSHAKC='    $(SHAKC)\
				'\n}\n/^SHAKOBJS/  c\\\nSHAKOBJS='  $(SHAKOBJS)\
				'\n}\n/^%\.[a-z][a-z]*:	/,/^$$/ d\n'\
				'/^moldy.bbl:	/,/^$$/ d\n' \
				'/^moldy.aux:	/,/^$$/ d\n' \
				 > make.sed 
		sed -f make.sed ./xmakefile > Makefile

cflow:		$(CFILES)
		cflow $(CFILES) > moldy.cflow
		cflow -r $(CFILES) > moldy.cflow.r

ci:		$(CFILES) $(HFILES) xmakefile $(EXTRAS) $(DOC)
		ci -u $(RCSFLAGS) $?

print:		$(CFILES) $(HFILES)
		for file in $(CFILES) $(HFILES) ;do\
			a2ps $(A2FLAGS) ${SHFILE} | lpr -l\
                        ;done
		touch print

lint:		
		$(LINT) $(LFLAGS) $(CFILES) -lm
				
tags:		$(CFILES) $(HFILES) 
		etags $(CFILES) $(HFILES)  

clean:		
		/bin/rm -f $(OFILES) $(LFILES) moldy $(UTILS) mdshak\
			mdshak.o moldy.dvi moldy.toc moldy.log

spotless:	
		$(MAKE) clean
		/bin/rm -f moldy.shar* moldy.shar.Z* cray.job* cray.job.Z* \
			   moldy.job* moldy.job.Z* \
			   moldy.com* moldy.com.Z* moldy.aux; /bin/true
annihilate:
		$(MAKE) spotless
		if ( [ -d RCS ] ) then\
                    rcsclean $(CFILES) $(HFILES) $(EXTRAS) moldy.tex;\
                else \
                   echo "RCS directory not present."\
                        "You don't REALLY want to delete the sources do you?";\
		fi             
#
#  Export options
#
moldy.tar:	$(CFILES) $(HFILES)  Makefile \
		$(EXTRAS) $(INFILES) $(DOC)
		$(TAR) cf moldy.tar\
		$(CFILES)  $(HFILES) Makefile \
		$(EXTRAS) $(INFILES) $(DOC)

moldy.tar.Z:	moldy.tar
		compress moldy.tar

moldy.shar:	$(CFILES) $(HFILES)  Makefile \
		$(EXTRAS) $(INFILES)  $(DOC)
		shar $(CFILES)  $(HFILES) Makefile \
		$(EXTRAS) $(INFILES)  $(DOC) > moldy.shar

moldy.shar.Z:	moldy.shar
		compress moldy.shar

cray:		$(CFILES) $(HFILES)  
		./cray_make $(CFILES)  $(HFILES) > cray.job

moldy.job:	$(CFILES) $(HFILES)  
		./make_cray $(CFILES)  $(HFILES) > moldy.job

compile_moldy.com:	Makefile
		./make_vms_compile $(FILES) > compile_moldy.com

link_moldy.com:		Makefile
		./make_vms_link moldy $(FILES) > link_moldy.com

compile_utils.com:	Makefile
		./make_vms_compile mdshak getopt $(UTILS) > compile_utils.com

link_utils.com:	Makefile
		./make_vms_link mdshak mdshak getopt $(SHAKS) > link_utils.com
		for file in $(UTILS); do ./make_vms_link $$file $$file getopt>> \
			link_utils.com; done

moldy.com:	$(CFILES) $(HFILES) $(EXTRAS)\
		$(INFILES) Aaaa_Read.Me $(DOC) $(VMSBUILD)
		$(DCLAR) Aaaa_Read.Me compile.com $(CFILES) $(HFILES)\
		$(INFILES) $(EXTRAS) getopt.c $(DOC) $(VMSBUILD) > moldy.com

moldy.com.Z:	moldy.com
		compress moldy.com

moldy.ps:	moldy.dvi
		dvi3ps -r -o a4 moldy > moldy.ps

moldy.dvi:	moldy.tex moldy.bbl
		latex moldy
		latex moldy
		@touch moldy.bbl

moldy.bbl:	moldy.aux simulation.bib claybib.bib
		-bibtex moldy

moldy.aux:	moldy.tex
		latex moldy

$(LFILES):	$(HFILES)

$(OFILES):	structs.h defs.h

xdr.o restart.o dump.o:	xdr.h

#  Special options for aux.c
aux.o:	aux.c 
	$(CC) $(CFLAGS) $(CFLAGS2) $(CFLAGSAUX) -c  $<

ewald.o:	ewald.c 
	$(CC) $(CFLAGS) $(CFLAGS2) $(CFLAGSP) -c $(INLINE) $<

rdf.o:	rdf.c 
	$(CC) $(CFLAGS) $(CFLAGS2) -c $<

kernel.o:	kernel.c 
	$(CC) $(CFLAGS) $(CFLAGS2) $(CFLAGSP) -c $<

force.o:	force.c 
	$(CC) $(CFLAGS) $(CFLAGS2) $(CFLAGSP) $(INLINE) -c $<


%.tex:		RCS/%.tex,v
		co $@

%.c:		RCS/%.c,v
		co $@

%.h:		RCS/%.h,v
		co $@

.SUFFIXES:	.c .o

.c.o:
	$(CC) $(CFLAGS) -c $<
