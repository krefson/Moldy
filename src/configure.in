dnl Process this file with autoconf to produce a configure script.
AC_INIT(accel.c)
AC_CONFIG_HEADER(config.h)

AC_CANONICAL_SYSTEM

if test "${CC-cc}" != gcc; then
dnl 
dnl Check for C compiler. DEFCC is preferred compiler, ALTCC is a list
dnl  of alternatives *which take the same flags*
dnl
   case "${target}" in
      alpha*-dec-osf*)    DEFCC="cc -migrate" ALTCC="mpicc bspcc cc c89";;
      hppa1.*-hp-*)       DEFCC=c89 ALTCC="mpicc bspcc";;
      rs6000-ibm-aix*)    DEFCC=cc ALTCC="mpcc mpicc bspcc xlc c89" ;;
      sparc-sun-sunos*)   DEFCC=cc ALTCC="mpicc bspcc acc";;
dnl   
dnl Unrtunately the Bourne-shell "env=value command" construct breaks the 
dnl configure script.
dnl However we can rely on the "env" command in the case of the crays.
dnl   
      T3D-cray-unicos*)   DEFCC="env TARGET=cray-t3d cc" ALTCC="mpicc bspcc";;
      T3E-cray-unicos*)   DEFCC="env TARGET=cray-t3e cc" ALTCC="mpicc bspcc";;
                     *)   DEFCC=cc ALTCC="mpicc bspcc";;
   esac
dnl
dnl Here we test whether the specified (or default) C compiler is one of those
dnl we know a good set of optimization flags for.
dnl
   CC="${CC=$DEFCC}"
   cc_matches=0
   for trial_cc in "$DEFCC" $ALTCC ; do
        if test "$trial_cc" = "$CC" ; then cc_matches=1 ; fi
   done
   if test $cc_matches -eq 1 ; then
    case "${target}" in
     alpha*-dec-osf*)   : ${OPT=-tune\ host\ -O4}  \
                          ${OPT2=-tune\ host\ -ansi_alias\ -O5};;
     #sparc-sun-sunos*) : ${OPT=-fast\ -xO4}  \
     #                    ${OPT2=-fast\ -xO4\ -fsimple}  \
     #                    ${LDFLAGS=-fast} ;;
     sparc-sun-sunos*)  : ${OPT=-fast\ -O4} ${OPT2=$OPT} \
                          ${LDFLAGS=-fast} ;;
     sparc-sun-solaris*): ${OPT=-fast\ -xO4}  \
                          ${OPT2="${OPT}\ -fsimple\ -xrestrict=%all"} \
                          ${LDFLAGS=-fast} ;;
     rs6000-ibm-aix*)   : ${OPT=-qansialias\ -O3}  ${OPT2=$OPT};;
     mips-sgi-irix5*)   : ${OPT=-O2\ -mips2} ${OPT2=$OPT} \
                          ${LIBS=-lmalloc\ -lfastm} ;;
     mips-sgi-irix6*)   : ${OPT=-O3\ -woff\ 1174} \
                          ${OPT2=${OPT}\ -OPT:alias=restrict:fast_sqrt=on}};;
     hppa1.*-hp-*)      : ${OPT=+O3\ +Olibcalls}  \
                          ${OPT2=${OPT}\ +Onoparmsoverlap}  ;;
     c*-convex-bsd*)    : ${OPT=-O2\ -na\ -nv\ -fi}  \
                          ${OPT2=${OPT}\ -alias\ standard\ -alias\ ptr_args\ -alias\ array_args} \
                          ${LIBS=-fi\ -lveclib}  ;;
     *mp-cray-unicos*|*90-cray-unicos*) 
                        : ${OPT=-h\ nostdc,vector3,scalar3,ivdep} ${OPT2=$OPT}
                        : ${LDFLAGS=-Wl,-D,HEAP=50000+50000\ -Wl,-D,STACK=10000+10000} \
                          ${LIBS=-lsci}  ;;
     T3*-cray-unicos*)  : ${OPT=-O2} ${OPT2=${OPT}\ -hrestrict=a} \
                          ${LIBS=-lsci} ;;
                    *)  : ${OPT=-O} ${OPT2=$OPT} 
    esac
   fi
fi

dnl Checks for programs.
AC_PROG_CC2
dnl AC_PATH_CPP
dnl Extra compiler options.  We know whether we are using gcc at this point.
if test "x$ac_cv_prog_gcc" = xyes; then
   case "${target}" in
        i586*|i686*)  OPT=-O2\ -mcpu=pentium\ -malign-double ;;
   esac
   OPT=${OPT}\ -ffast-math
   OPTAUX=-funroll-loops
fi
AC_PROG_CPP2

AC_PROG_INSTALL
AC_PROG_LN_S
dnl AC_PROG_MAKE_SET

dnl Checks for specific systems
AC_AIX

dnl Checks for libraries.
dnl Replace `main' with a function in -lm:
AC_CHECK_LIB(m, main)

dnl Checks for header files.
dnl ANSI headers.  Only set HAVE_STDARG_H if all present.
AC_HEADER_STDC
rm -f string.h time.h stddef.h stdlib.h
if test $ac_cv_header_stdc = yes; then
AC_DEFINE(HAVE_STDARG_H)
else
$LN_S string-subst.h string.h
$LN_S time-subst.h time.h
$LN_S stddef-subst.h stddef.h
$LN_S stdlib-subst.h stdlib.h
fi

AC_CHECK_HEADERS(sys/resource.h sys/time.h sys/times.h sys/types.h rpc/xdr.h)
AC_HEADER_TIME

dnl  
dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_CACHE_CHECK("whether $CC supports pointers to void",md_cv_prog_cc_voidptr,
AC_TRY_COMPILE(,void * func(); void *ip; ip=func(ip);, md_cv_prog_cc_voidptr=yes,md_cv_prog_cc_voidptr=no))
if test $md_cv_prog_cc_voidptr = yes; then
   AC_DEFINE(HAVE_VOID_PTRS)
fi

AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF

AC_CHECK_FUNCS(xdr_int)
if test $ac_cv_func_xdr_int = no; then
   AC_CHECK_LIB(nsl, xdr_int)
   ac_cv_func_xdr_int=yes
fi
if test $ac_cv_func_xdr_int = no; then
   AC_CHECK_LIB(sun, xdr_int)
fi

AC_CHECK_FUNCS(gettimeofday getrusage strdup strerror strstr strchr memcpy memset remove strtol popen getopt raise times)

AC_CACHE_CHECK("whether times returns the wall-clock time",md_cv_func_times_value,
AC_TRY_RUN([#include <sys/times.h>
#include<time.h>
int main() {struct tms tm; if( times(&tm) <= 0 ) exit(-1); else exit(0);}],
md_cv_func_times_value=yes,md_cv_func_times_value=no,md_cv_func_times_value=yes))

if test $md_cv_func_times_value != yes; then
   AC_DEFINE(TIMES_RETURNS_STATUS)
fi

dnl Select parallel compilation
AC_ARG_ENABLE(parallel, --enable-parallel: Compile for parallelism using one of mpi/bsp/shmem/tcgmsg (default is mpi), 
if test $enableval = yes ; then enableval="mpi" ; fi
parlib=$enableval, parlib=none
)
if test $parlib = "mpi" ; then
dnl Don't check for headers and libraries if compiling with mpicc
dnl Many "mpicc's" are broken and don't support the -E flag needed
dnl to run the preprocessor in the test for headers.
   if test "$CC" = "mpicc" ; then
       ac_cv_header_mpi_h="yes"
       AC_CHECK_FUNC(MPI_Init)
   else
      AC_CHECK_HEADERS(mpi.h)
      AC_CHECK_LIB($parlib, MPI_Init)
      ac_cv_func_MPI_Init=$ac_cv_lib_mpi_MPI_Init
   fi   
   if test $ac_cv_func_MPI_Init = yes && test $ac_cv_header_mpi_h = yes; then 
      AC_DEFINE(SPMD) 
      AC_DEFINE(MPI)
   else
      AC_MSG_WARN(Unable to compile and link with MPI libraries)
    fi
fi
if test $parlib = "bsp" ; then
dnl Don't check for headers  if compiling with mpicc
dnl bspcc v1.3 is broken and doesn't support the -E flag needed
dnl to run the preprocessor in the test for headers.
   if test "$CC" = "bspcc" ; then
       ac_cv_header_bsp_h="yes"
       ac_cv_header_bsp_level1_h="yes"
       AC_CHECK_FUNC(bsp_begin)
   else
      AC_CHECK_HEADERS(bsp.h bsp_level1.h)
      AC_CHECK_LIB($parlib, bsp_begin)
      ac_cv_func_bsp_begin=$ac_cv_lib_bsp_bsp_begin
   fi
   if  test $ac_cv_func_bsp_begin = "yes" && test $ac_cv_header_bsp_h = "yes" && test $ac_cv_header_bsp_level1_h = "yes"; then
      AC_DEFINE(SPMD) 
      AC_DEFINE(BSP)
   else
      AC_MSG_WARN(Unable to compile and link with BSP libraries)
   fi
fi
if test $parlib = "oldbsp" ; then
   AC_CHECK_LIB(bsp, bspstart)
   if test $ac_cv_lib_bsp_bspstart = "yes"; then
      AC_DEFINE(SPMD) 
      AC_DEFINE(BSP0)
   else
      AC_MSG_WARN(Unable to compile and link with BSP libraries)
   fi
fi
if test $parlib = "tcgmsg" ; then
   CF_INCLUDE_PATH(/usr/local/include)
   AC_CHECK_HEADERS(sndrcv.h)
   AC_CHECK_LIB($parlib, PBEGIN_)
   if test $ac_cv_lib_tcgmsg_PBEGIN_ = yes && test $ac_cv_header_sndrcv_h = yes; then 
      AC_DEFINE(SPMD) 
      AC_DEFINE(TCGMSG)
   else
      AC_MSG_WARN(Unable to compile and link with TCGMSG libraries)
   fi
fi
if test $parlib = "shmem" ; then
   AC_CHECK_HEADERS(mpp/shmem.h)
   AC_CHECK_FUNCS(barrier)
   if test $ac_cv_func_barrier = yes && test $ac_cv_header_mpp_shmem_h = yes; then 
      AC_DEFINE(SPMD) 
      AC_DEFINE(SHMEM)
   else
      AC_MSG_WARN(Unable to compile and link with SHMEM libraries)
   fi
fi


dnl Substitutions
AC_SUBST(CC)
AC_SUBST(CPPFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(OPT)
AC_SUBST(OPT2)
AC_SUBST(OPTAUX)
AC_SUBST(LDFLAGS)
AC_SUBST(LIBS)


AC_OUTPUT(Makefile, echo timestamp > stamp-h)
